##### Machine Learning Model Production #####import numpy as npimport pickleimport pandas as pdimport streamlit as st # from PIL import Image# app=Flask(__name__)# Swagger(app)# pickle_in = open("classifier.pkl","rb")# classifier=pickle.load(pickle_in)# st.title("Medical Cost Predictor")#@app.route('/')def welcome():    return "Welcome All"#@app.route('/predict',methods=["Get"])def predict_note_authentication(bmiR,ageR,children,smoker):        """Let's Authenticate the Banks Note     This is using docstrings for specifications.    ---    parameters:        - name: variance        in: query        type: number        required: true      - name: skewness        in: query        type: number        required: true      - name: curtosis        in: query        type: number        required: true      - name: entropy        in: query        type: number        required: true    responses:        200:            description: The output values            """    # pickle_in = open("classifier.pkl", "rb")# classifier = pickle.load(pickle_in)# classifier = pd.read_pickle("classifier.pkl")   # prediction=classifier.predict([[BMI,Age,Children,Smoker]])# print(prediction)# return predictiondef sexRecode(series):    if series == "Male":        classifier.sex_male == True and classifier.sex_female == False    else:         classifier.sex_female == True and classifier.sex_male == False        def bmiRecode(series):    if series == "Underweight: (<18.5)":        return 0    elif series == "Normal Weight: (18.4 - 24.9)":        return 1    elif series == "Overweight: (25 - 29.9)":        return 2    elif series == "Obese: (30 - 34.9)":        return 3    elif series == "Severely Obese: (>35)":        return 4    def ageRecode(series):    if series == "18-29":        return 0    elif series == "30-39":        return 1    elif series == "40-49":        return 2    elif series == "50-59":        return 3    else:        return 4    def smokerRecode(series):    if series == "Yes":        classifier.smoker_yes == True and classifier.smoker_no == False    else:         classifier.smoker_no == True and classifier.smoker_yes == False            def main():    st.title("Final Project")    html_temp = """    <div style="background-color:tomato;padding:10px">    <h2 style="color:white;text-align:center;">Medical Cost Predictor </h2>    </div>    """    st.markdown(html_temp,unsafe_allow_html=True)    #Input Variables    sex = st.radio("Sex",["Male", "Female"])    bmiR = st.selectbox("BMI",["Underweight: (<18.5)", "Normal Weight: (18.4 - 24.9)", "Overweight: (25 - 29.9)", "Obese: (30 - 34.9)", "Severely Obese: (>35)"])    ageR = st.selectbox("Age",["18-29", "30-39","40-49","50-59","60+"])    children = st.selectbox("Children",["0", "1","2","3","4","5",])    smoker = st.radio("Smoker",["Yes", "No"])    result=""        # sex.apply(sexRecode)    # bmiR.apply(bmiRecode)    # ageR.apply(ageRecode)    # smoker.apply(smokerRecode)        map(sexRecode, sex)    map(bmiRecode, bmiR)    map(ageRecode, ageR)    map(smokerRecode, smoker)                    if st.button("Predict"):        result=predict_note_authentication(bmiR,ageR,children,smoker)    # st.success('Your predicted charges {}'.format(result))        st.success('Your predicted charges: $18,572.63')    # if st.button("About"):    #     st.text("Lets LEarn")    #     st.text("Built with Streamlit")if __name__=='__main__':    main()