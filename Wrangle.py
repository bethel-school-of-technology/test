import pandas as pdinsurance = pd.read_csv("/Users/michaelwilt/Desktop/MedicalCostProject/datasets/insurance.csv")### Data Exploration ####View first 5 rows and columnsinsurance.head(5)insurance.columns#View types of columns and statistical valuesinsurance.info()insurance.describe()#                age          bmi     children       charges# count  1338.000000  1338.000000  1338.000000   1338.000000# mean     39.207025    30.663397     1.094918  13270.422265# std      14.049960     6.098187     1.205493  12110.011237# min      18.000000    15.960000     0.000000   1121.873900# 25%      27.000000    26.296250     0.000000   4740.287150# 50%      39.000000    30.400000     1.000000   9382.033000# 75%      51.000000    34.693750     2.000000  16639.912515# max      64.000000    53.130000     5.000000  63770.428010insurance.dtypes# age           int64# sex          object# bmi         float64# children      int64# smoker       object# region       object# charges     float64# dtype: object#Look at null valuesinsurance.isnull()##We have no null values in our dataset! I might play the lottery!### Data Cleaning/Wrangling ###insurance1 = insurance.iloc[:,:]##Recode BMI to categorical for Statistical Modeling    #BMI Categories    # Underweight - BMI under 18.5 kg/m^2.    # Normal weight - BMI greater than or equal to 18.5 to 24.9 kg/m^2.    # Overweight – BMI greater than or equal to 25 to 29.9 kg/m^2.    # Obesity – BMI greater than or equal to 30 kg/m^2 to 34.9 kg/m^2.    # Severe Obesity - BMI greater than or equal to 35 kg/m^2.def recode(series):    if series < 18.5:        return 0    elif series < 25:        return 1    elif series < 30:        return 2    elif series < 35:        return 3    else:        return 4     insurance1["bmiR"] = insurance1.bmi.apply(recode)insurance1.head()##Recode AGE to categorical for Statistical Modeling    #Age Categories    # Under 18    # 18 - 29    # 30-39    # 40-49    # 50-59    # 60 and overdef ageRecode(series):    if series < 0:        return 0    elif series < 30:        return 1    elif series < 40:        return 2    elif series < 50:        return 3    elif series < 60:        return 4    else:        return 5    insurance1["ageR"] = insurance1.age.apply(ageRecode)insurance1.head()##Recode Region to numeric-categorical for Statistical Modeling    #Region Categories    # southeast    364    # southwest    325    # northwest    325    # northeast    324    #Look at region for all values to look for recodeinsurance.region.value_counts()def regionRecode(series):    if series.lower() == "southeast":        return 0    elif series.lower() == "southwest":        return 1    elif series.lower() == "northeast":        return 2    elif series.lower() == "northwest":        return 3    insurance1["regionR"] = insurance1.region.apply(regionRecode)insurance1.head()##Drop the original columns that we recoded and assign new dfinsurance2 = insurance1.drop(["bmi", "age", "region"], axis=1)    insurance2.head()### Create dataset for visualization#Recode BMI and Charges to Integers for better visualizationinsurance3 = insurance.drop(["bmiR", "ageR", "regionR"], axis = 1)insurance3.bmi = insurance.bmi.astype(int)insurance3.charges = insurance.charges.astype(int)insurance3.head()## Export for Statistical Modeling#For Statistical Modelinginsurance2.to_csv(r'/Users/michaelwilt/Desktop/MedicalCostProject/insuranceForStats.csv')#For Visualizationinsurance3.to_csv(r'/Users/michaelwilt/Desktop/MedicalCostProject/insuranceForViz.csv')